{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["screen","window","GameOfLifeBackground","interval","color","buildGrid","Array","colsNum","rowsNum","fill","map","Math","nextCell","cell","numNeighbours","makeNextGen","nextGen","grid","col","row","x","y","xCell","yCell","render","ctx","React","canvas","document","COLS_NUM","ROWS_NUM","update","timestamp","prevTimestamp","id","style","position","left","bottom","zIndex","App","delay","ReactDOM","getElementById"],"mappings":"0QAGQA,EAAWC,OAAXD,OAEKE,EAAuB,SAAC,GAAyC,QAAvCC,gBAAuC,MAA5B,IAA4B,MAAtBC,aAAsB,MAAd,QAAc,EACtEC,EAAY,iBAAkB,cAClC,OAAO,IAAIC,MAAMC,GAAV,gBAEA,kBACH,IAAID,MAAME,GAASC,KAAK,MAAMC,KAAI,kBAAMC,WAAN,EAAiBA,uBAJzD,IAQMC,EAAW,iBAAkB,cAGjC,OAAIC,QAFuBC,KAAqBA,EAAhD,GAGE,EAEED,OAAJ,IAAkBC,EAChB,EAGF,IAVF,IAaMC,EAAc,iBAClB,gBAGE,IAFA,IAAMC,EAAUC,EAAA,KAAS,kCAEhBC,EAAT,EAAkBA,EAAMD,EAAxB,OAAqCC,IACnC,IAAK,IAAIC,EAAT,EAAkBA,EAAMF,KAAxB,OAA0CE,IAAO,CAI/C,IAHA,IAAMN,EAAOI,KAAb,GACIH,EAAJ,EAESM,GAAT,EAAiBA,EAAjB,EAAwBA,IACtB,IAAK,IAAIC,GAAT,EAAiBA,EAAjB,EAAwBA,IACtB,GAAID,OAAJ,IAAeC,EAAf,CAIA,IAAMC,EAAQJ,EAAd,EACMK,EAAQJ,EAAd,EAIA,GAFEG,MAAcC,GAAdD,GAA4BA,EAA5BA,GAA4CC,EAD9C,EAMET,GAFyBG,EAAKC,EAALD,GAAcE,EAAvC,GAONH,QAAoBJ,EAASC,EAA7BG,GAIJ,WAEF,CAlCF,IAqCMQ,EAAS,iBAAkB,cAC/B,IAAK,IAAIN,EAAT,EAAkBA,EAAMD,EAAxB,OAAqCC,IACnC,IAAK,IAAIC,EAAT,EAAkBA,EAAMF,KAAxB,OAA0CE,IAAO,CAC/C,IAAMN,EAAOI,KAAb,GAEAQ,cACAA,OApER,EAoEiBP,EApEjB,EAoEmCC,EApEnC,KAqEQM,YAAgBZ,EAAOT,EAAvBqB,OACAA,YARN,IA6CA,OAhCAC,eAAgB,WACd,IAAMC,EAASC,wBAAf,gBACMH,EAAME,aAAZ,MAEAA,QAAe3B,EAAf2B,MACAA,SAAgB3B,EAAhB2B,OAEA,IAKA,EALME,EAAWlB,WAAWgB,QAlFhC,GAmFUG,EAAWnB,WAAWgB,SAnFhC,GAqFQV,EAAOZ,EAAUwB,EAArB,GAmBA5B,8BAfe,SAAT8B,EAAUC,GACd,IACEC,KAGED,IAAJ,IACEC,IACAhB,EAAOF,EAAYE,EAAMY,EAAzBZ,GAEAO,EAAOC,EAAPD,IAGFvB,qCAID,CAACI,EAAWF,EAAUY,EA9BzBW,IAiCE,4BACEQ,GADF,eAEEC,MAAO,CACLC,SADK,WAELC,KAFK,EAGLC,OAHK,EAILC,QAAS,MC7GFC,EAJH,WACV,OAAO,kBAAC,EAAD,CAAsBC,MAAO,IAAMrC,MAAM,UCElDsC,IAASlB,OAAO,kBAAC,EAAD,MAASI,SAASe,eAAe,W","file":"static/js/main.828da8b6.chunk.js","sourcesContent":["import React from 'react'\n\nconst RESOLUTION = 8\nconst { screen } = window\n\nexport const GameOfLifeBackground = ({ interval = 1000, color = 'black' }) => {\n  const buildGrid = React.useCallback((colsNum, rowsNum) => {\n    return new Array(colsNum)\n      .fill(null)\n      .map(() =>\n        new Array(rowsNum).fill(null).map(() => Math.floor(Math.random() * 2))\n      )\n  }, [])\n\n  const nextCell = React.useCallback((cell, numNeighbours) => {\n    const isDeadlyNeighbours = numNeighbours < 2 || numNeighbours > 3\n\n    if (cell === 1 && isDeadlyNeighbours) {\n      return 0\n    }\n    if (cell === 0 && numNeighbours === 3) {\n      return 1\n    }\n\n    return cell\n  }, [])\n\n  const makeNextGen = React.useCallback(\n    (grid, cols, rows) => {\n      const nextGen = grid.map((arr) => [...arr])\n\n      for (let col = 0; col < grid.length; col++) {\n        for (let row = 0; row < grid[col].length; row++) {\n          const cell = grid[col][row]\n          let numNeighbours = 0\n\n          for (let x = -1; x < 2; x++) {\n            for (let y = -1; y < 2; y++) {\n              if (x === 0 && y === 0) {\n                continue\n              }\n\n              const xCell = col + x\n              const yCell = row + y\n              const isWithinBoundaries =\n                xCell >= 0 && yCell >= 0 && xCell < cols && yCell < rows\n\n              if (isWithinBoundaries) {\n                const currentNeighbour = grid[col + x][row + y]\n\n                numNeighbours += currentNeighbour\n              }\n            }\n          }\n\n          nextGen[col][row] = nextCell(cell, numNeighbours)\n        }\n      }\n\n      return nextGen\n    },\n    [nextCell]\n  )\n\n  const render = React.useCallback((ctx, grid) => {\n    for (let col = 0; col < grid.length; col++) {\n      for (let row = 0; row < grid[col].length; row++) {\n        const cell = grid[col][row]\n\n        ctx.beginPath()\n        ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION)\n        ctx.fillStyle = cell ? color : '#FFF'\n        ctx.fill()\n      }\n    }\n  }, [])\n\n  React.useEffect(() => {\n    const canvas = document.getElementById('game-of-life')\n    const ctx = canvas.getContext('2d')\n\n    canvas.width = screen.width\n    canvas.height = screen.height\n\n    const COLS_NUM = Math.round(canvas.width / RESOLUTION)\n    const ROWS_NUM = Math.round(canvas.height / RESOLUTION)\n\n    let grid = buildGrid(COLS_NUM, ROWS_NUM)\n\n    let prevTimestamp\n\n    const update = (timestamp) => {\n      if (!prevTimestamp) {\n        prevTimestamp = timestamp\n      }\n\n      if (timestamp - prevTimestamp > interval) {\n        prevTimestamp = timestamp\n        grid = makeNextGen(grid, COLS_NUM, ROWS_NUM)\n\n        render(ctx, grid)\n      }\n\n      window.requestAnimationFrame(update)\n    }\n\n    window.requestAnimationFrame(update)\n  }, [buildGrid, interval, makeNextGen, render])\n\n  return (\n    <canvas\n      id='game-of-life'\n      style={{\n        position: 'absolute',\n        left: 0,\n        bottom: 0,\n        zIndex: -1\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { GameOfLifeBackground } from 'react-game-of-life-background'\n\nconst App = () => {\n  return <GameOfLifeBackground delay={1000} color='#EEE' />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}